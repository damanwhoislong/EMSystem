
import java.io.IOException;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.Desktop;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 * The main class of the Employee Management System Project.
 * @author Longman Xu and Tommy Huang
 * @version 2018-06-19
 */
public class MainJFrame extends javax.swing.JFrame {
	
	// <editor-fold desc="Global Variables Declarations">
	// useful global variables declarations
	private EmployeeHashTable employeeTable;	// the employee hash table
	private static Settings settings;			// the object for managing settings
	private int selectedEmployeeNumber = -1;	// the currently selected employee number
	
	// flags for when certain listeners, methods, or other sections of code should be active
	private boolean locIsOK = true;	// flag for whether changing location should be attempted
	private boolean sexIsOK = true;	// flag for whether changing sex should be attempted
	
	private boolean saveable = false;	// flag for whether saving should be attempted
	private boolean changeType = false;	// flag for when an employee is changing type
	
	// lists of text fields used to check for emptiness when adding employees; initialized in constructor
	private final JTextField[] addEmployeeCommonTextFields;
	private final JTextField[] addEmployeePTTextFields;
	// </editor-fold>
	
	/**
	 * Creates new form MainJFrame 
	 */
	public MainJFrame() {
		// create a new hash table
		employeeTable = new EmployeeHashTable(10);
		// initialize all components
		initComponents();	// autogenerated method for initializing the application
		jComboBox1.setSelectedItem(settings.getLookAndFeel());	// set the selected look and feel in the drop down menu
		initEmployeeJTable();	// call method for initializing the employee table display table
		jTable1.setAutoCreateRowSorter(true);	// enable sorting of the employee display table
		resetLocList();	// set the list of locations in the add locations window
		jPanelEdit.setVisible(false);	// hide the lower right panel for editing employees
		
		// prevent reordering of table headers
		jTable1.getTableHeader().setReorderingAllowed(false);
		jTable2.getTableHeader().setReorderingAllowed(false);
		
		// set the text fields lists
		addEmployeeCommonTextFields = new JTextField[] {
			fieldNumber,
			fieldFName,
			fieldLName,
			fieldDedRate
		};
		addEmployeePTTextFields = new JTextField[] {
			fieldHourWage,
			fieldHourWeek,
			fieldWeekYear
		};
	}
	
	
	/**
	 * The entry point into the program.
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		// open the saved settings
		settings = Settings.open("settings.cfg");
		
		// Set the look and feel from the settings (mostly autogenerated)
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if (settings.getLookAndFeel().equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			System.err.println("Error encountered while setting the look and feel:");
			ex.printStackTrace(System.err);
		}
		
		// Create and display the form by calling constructor (mostly autogenerated)
		java.awt.EventQueue.invokeLater(() -> {
			new MainJFrame().setVisible(true);
		});
	}
	
	
	/**
	 * Display an error message to the user.
	 * @param msg the message to be displayed.
	 */
	public void getAngryAtUser(String msg) {
		JOptionPane.showConfirmDialog(null, msg, "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
	}
	
	/**
	 * Initializes the JTable with the employee list.
	 * @param hashTable 
	 */
	private void initEmployeeJTable() {
		DefaultTableModel employeeTableModel = (DefaultTableModel) jTable1.getModel();
		employeeTableModel.setRowCount(0);	// reset the displat table to be empty
		
		EmployeeArrayList[] hashTable = employeeTable.getHashTable();
		// iterate through the hash table, adding each new employee as a row
		for (EmployeeArrayList bucket : hashTable) {
			for (EmployeeInfo employee : bucket) {
				String empType = null;
				if (employee instanceof FullTimeEmployee) {
					empType = "Full Time";
				}
				else if (employee instanceof PartTimeEmployee) {
					empType = "Part Time";
				}
				Object[] rowData = {
					employee.getEmployeeNumber(),
					employee.getFirstName(),
					employee.getLastName(),
					employeeTable.getLocationName(employee.getWorkLocation()),
					empType
				};
				employeeTableModel.addRow(rowData);
			}
		}
	}
	
	/**
	 * Add a new employee to the employee display table.
	 * @param newEmployee the new employee to be added.
	 */
	private void addToEmployeeJTable(EmployeeInfo newEmployee) {
		DefaultTableModel employeeTableModel = (DefaultTableModel) jTable1.getModel();
		String empType = null;
		if (newEmployee instanceof FullTimeEmployee) {
			empType = "Full Time";
		}
		else if (newEmployee instanceof PartTimeEmployee) {
			empType = "Part Time";
		}
		// add cell information to each row
		Object[] rowData = {
			newEmployee.getEmployeeNumber(),
			newEmployee.getFirstName(),
			newEmployee.getLastName(),
			employeeTable.getLocationName(newEmployee.getWorkLocation()),
			empType
		};
		employeeTableModel.addRow(rowData);
	}
	
	/**
	 * Updates the information of an employee in the employee display table.
	 * @param empNumber the employee number of the employee to be updated.
	 */
	private void updateEmployeeJtable(int empNumber) {
		DefaultTableModel employeeTableModel = (DefaultTableModel) jTable1.getModel();
		
		int row = -1;
		// get the row of the employee being changed by converting the employee hash table to a list, and finding the index
		EmployeeArrayList employeeList = employeeTable.returnAllEmployees();
		for (int i = 0; i < employeeList.size(); i++) {
			if (employeeList.get(i).getEmployeeNumber() == empNumber) {
				row = i;
				break;
			}
		}
		
		employeeTableModel.removeRow(row);	// remove the row from the display table
		EmployeeInfo modifiedEmployee = employeeList.get(row);	// get the employee to be modified
		
		// add the row with new information
		String empType = null;
		if (modifiedEmployee instanceof FullTimeEmployee) {
			empType = "Full Time";
		}
		else if (modifiedEmployee instanceof PartTimeEmployee) {
			empType = "Part Time";
		}
		Object[] rowData = {
			modifiedEmployee.getEmployeeNumber(),
			modifiedEmployee.getFirstName(),
			modifiedEmployee.getLastName(),
			employeeTable.getLocationName(modifiedEmployee.getWorkLocation()),
			empType
		};
		employeeTableModel.insertRow(row, rowData);
	}
	
	/**
	 * Swaps the add employee display between FT and PT employees.
	 * @param type the employee type to be displayed: 0 for FT, and 1 for PT
	 */
	private void changeSelection(int type) {
		if (type == 0) { // full time
			labelFull0.setVisible(true);
			fieldSalary.setVisible(true);
			
			labelPart0.setVisible(false);
			fieldHourWage.setVisible(false);
			labelPart1.setVisible(false);
			fieldHourWeek.setVisible(false);
			labelPart2.setVisible(false);
			fieldWeekYear.setVisible(false);
		}
		else if (type == 1) { // part time
			labelFull0.setVisible(false);
			fieldSalary.setVisible(false);
			
			labelPart0.setVisible(true);
			fieldHourWage.setVisible(true);
			labelPart1.setVisible(true);
			fieldHourWeek.setVisible(true);
			labelPart2.setVisible(true);
			fieldWeekYear.setVisible(true);
		}
	}
	
	/**
	 * Clears all the text in the add pop-up menu
	 */
	private void clearFields() {
		// clear all text fields
		fieldNumber.setText("");
		fieldFName.setText("");
		fieldLName.setText("");
		fieldDedRate.setText("");
		fieldHourWage.setText("");
		fieldHourWeek.setText("");
		fieldWeekYear.setText("");
		fieldSalary.setText("");
		// reset all drop down menus
		dropDownLocation.setSelectedIndex(0);
		dropDownSexes.setSelectedIndex(0);		
	}
	
	/**
	 * Reset the right side of the screen to display the info of selectedEmployeeNumber
	 */
	private void setEditPanels(int empNumber) {
		EmployeeInfo selectedEmployee = employeeTable.find(empNumber);
		jPanelEdit.setVisible(true);
		DefaultTableModel attributeTableModel = (DefaultTableModel) jTable2.getModel();
		
		// reset the lower edit panel
		resetLocEditList();
		sexIsOK = false;
		dropDownEditSex.setSelectedIndex(selectedEmployee.getSex());
		sexIsOK = true;
		
		// reset the rows and columns
		attributeTableModel.setColumnCount(0);
		attributeTableModel.setRowCount(6);
		jTable2.clearSelection();
		
		// set the text for the table (both attribute names and values)
		if (selectedEmployee instanceof PartTimeEmployee) {
			Object[] info = {
				selectedEmployee.getEmployeeNumber(),
				selectedEmployee.getFirstName(),
				selectedEmployee.getLastName(),
				selectedEmployee.getSexString(),
				employeeTable.getLocationName(selectedEmployee.getWorkLocation()),
				"Part Time",
				selectedEmployee.getDeductionsRate(),
				((PartTimeEmployee) selectedEmployee).getHourlyWage(),
				((PartTimeEmployee) selectedEmployee).getHoursPerWeek(),
				((PartTimeEmployee) selectedEmployee).getWeeksPerYear(),
				selectedEmployee.calcAnnualNetIncome()
			};
			Object[] firstColInfo = {
				"employee number",
				"first name",
				"last name",
				"sex",
				"work location",
				"type",
				"deducations rate",
				"hourly wage",
				"hours per week",
				"weeks per year",
				"net income"
			};
			attributeTableModel.addColumn("attributes", firstColInfo);
			attributeTableModel.addColumn("information", info);
		}
		else if (selectedEmployee instanceof FullTimeEmployee) {
			Object[] info = {
				selectedEmployee.getEmployeeNumber(),
				selectedEmployee.getFirstName(),
				selectedEmployee.getLastName(),
				selectedEmployee.getSexString(),
				employeeTable.getLocationName(selectedEmployee.getWorkLocation()),
				"Full Time",
				selectedEmployee.getDeductionsRate(),
				((FullTimeEmployee) selectedEmployee).getYearlySalary(),
				selectedEmployee.calcAnnualNetIncome()

			};
			Object[] firstColInfo = {
				"employee number",
				"first name",
				"last name",
				"sex",
				"work location",
				"type",
				"deducations rate",
				"salary",
				"net income"
			};
			attributeTableModel.addColumn("attributes", firstColInfo);
			attributeTableModel.addColumn("information", info);
		}
	}
	
	/**
	 * Resets the list of locations in the add locations window.
	 */
	private void resetLocList() {
		dropDownLocation.removeAllItems();
		for (String locationName : employeeTable.getLocationList()) {
			dropDownLocation.addItem(locationName);
		}
	}
	
	/**
	 * Resets the list of locations in the edit locations drop down menu.
	 */
	private void resetLocEditList() {
		locIsOK = false;	// disable the listner during this method
		dropDownEditLocation.removeAllItems();
		for (String locationName : employeeTable.getLocationList()) {
			dropDownEditLocation.addItem(locationName);
		}
		// set the selected location to the employee's location
		dropDownEditLocation.setSelectedIndex(employeeTable.find(selectedEmployeeNumber).getWorkLocation());
		locIsOK = true;		// re-enable the listener
	}
	
	/**
	 * Saves the employee hash table.
	 * @throws IOException if an IOException occurs.
	 */
	private void saveTable() throws IOException {
		try {
			employeeTable.save();
		} catch (IllegalArgumentException ex) {
			saveAsButtonActionPerformed(null);
		}
		jTabbedPane1.setSelectedIndex(0);	// reset the tab
		System.out.println("Saved all employees.");
	}
	
	/**
	 * Warns the user to save the employee table. Returns true if safe to discard current table.
	 * @return true if the user is okay to discard the current table.
	 * @throws IOException if an IOException occurs.
	 */
	private boolean saveWarning() throws IOException {
		if (!saveable) {	// no need to save if there's nothing to save
			return true;
		}
		
		int saveDialogResult = JOptionPane.showConfirmDialog(this, "Save changes?", "Save Warning", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
		switch (saveDialogResult) {
			case JOptionPane.NO_OPTION:	// if cancel, do not close
				return true;
			case JOptionPane.YES_OPTION:
				saveTable();
				return true;
			default:
				return false;
		}
	}
		
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addPopup = new javax.swing.JDialog();
        backButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dropDownType = new javax.swing.JComboBox<>();
        fieldLName = new javax.swing.JTextField();
        fieldFName = new javax.swing.JTextField();
        fieldNumber = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        dropDownSexes = new javax.swing.JComboBox<>();
        addTheEmployee = new javax.swing.JButton();
        labelFull0 = new javax.swing.JLabel();
        labelRate = new javax.swing.JLabel();
        fieldSalary = new javax.swing.JTextField();
        fieldDedRate = new javax.swing.JTextField();
        labelPart0 = new javax.swing.JLabel();
        labelPart1 = new javax.swing.JLabel();
        labelPart2 = new javax.swing.JLabel();
        fieldHourWage = new javax.swing.JTextField();
        fieldHourWeek = new javax.swing.JTextField();
        fieldWeekYear = new javax.swing.JTextField();
        dropDownLocation = new javax.swing.JComboBox<>();
        errorPopup = new javax.swing.JDialog();
        errorMsgLabel = new javax.swing.JLabel();
        locationDialog = new javax.swing.JDialog();
        locationTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        confirmLocationButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        ManagerPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        delButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        addLocationsButton = new javax.swing.JButton();
        jPanelEdit = new javax.swing.JPanel();
        dropDownEditSex = new javax.swing.JComboBox<>();
        dropDownEditLocation = new javax.swing.JComboBox<>();
        changeTypeButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        searchEmployeeField = new javax.swing.JTextField();
        searchEmployeeButton = new javax.swing.JButton();
        filePanel = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        settingsPanel = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        helpPanel = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        addPopup.setTitle("Add an employee");
        addPopup.setMinimumSize(new java.awt.Dimension(600, 400));
        addPopup.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        addPopup.setResizable(false);

        backButton.setText("cancel");
        backButton.setToolTipText("");
        backButton.setMaximumSize(new java.awt.Dimension(70, 25));
        backButton.setMinimumSize(new java.awt.Dimension(70, 25));
        backButton.setPreferredSize(new java.awt.Dimension(70, 25));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Emp. #");

        jLabel3.setText("First name");

        jLabel4.setText("Last name");

        jLabel5.setText("Location");

        jLabel7.setText("Emp. Type");

        dropDownType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full time", "Part time" }));
        dropDownType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownTypeActionPerformed(evt);
            }
        });

        jLabel8.setText("Sex");

        dropDownSexes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        addTheEmployee.setText("add");
        addTheEmployee.setToolTipText("");
        addTheEmployee.setMaximumSize(new java.awt.Dimension(70, 25));
        addTheEmployee.setMinimumSize(new java.awt.Dimension(70, 25));
        addTheEmployee.setPreferredSize(new java.awt.Dimension(70, 25));
        addTheEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTheEmployeeActionPerformed(evt);
            }
        });

        labelFull0.setText("Salary");

        labelRate.setText("Deductions rate");

        labelPart0.setText("Hourly Wage");

        labelPart1.setText("Hours per week");

        labelPart2.setText("Weeks per year");

        dropDownLocation.setMaximumRowCount(15);

        javax.swing.GroupLayout addPopupLayout = new javax.swing.GroupLayout(addPopup.getContentPane());
        addPopup.getContentPane().setLayout(addPopupLayout);
        addPopupLayout.setHorizontalGroup(
            addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fieldNumber)
                    .addComponent(fieldFName)
                    .addComponent(fieldLName)
                    .addComponent(dropDownSexes, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropDownType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dropDownLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createSequentialGroup()
                        .addComponent(labelFull0)
                        .addGap(18, 18, 18)
                        .addComponent(fieldSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createSequentialGroup()
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPart0, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPart1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPart2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldWeekYear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(fieldHourWage, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(fieldHourWeek))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(addPopupLayout.createSequentialGroup()
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTheEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createSequentialGroup()
                            .addComponent(labelRate)
                            .addGap(18, 18, 18)
                            .addComponent(fieldDedRate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(111, 111, 111))
        );
        addPopupLayout.setVerticalGroup(
            addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFull0, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPopupLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(25, 25, 25)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(25, 25, 25)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(dropDownLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPopupLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPart0, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldHourWage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPart1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldHourWeek, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldWeekYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPart2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)))
                .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPopupLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addTheEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addPopupLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(labelRate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldDedRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(addPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownSexes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGap(29, 29, 29))
        );

        errorPopup.setTitle("ERROR");
        errorPopup.setMinimumSize(new java.awt.Dimension(375, 150));
        errorPopup.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        errorPopup.setSize(new java.awt.Dimension(375, 150));

        errorMsgLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        errorMsgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/error.png"))); // NOI18N
        errorMsgLabel.setText("Enter ur error msg here");
        errorMsgLabel.setMaximumSize(new java.awt.Dimension(300, 150));
        errorMsgLabel.setMinimumSize(new java.awt.Dimension(300, 150));
        errorMsgLabel.setName(""); // NOI18N
        errorMsgLabel.setPreferredSize(new java.awt.Dimension(300, 150));

        javax.swing.GroupLayout errorPopupLayout = new javax.swing.GroupLayout(errorPopup.getContentPane());
        errorPopup.getContentPane().setLayout(errorPopupLayout);
        errorPopupLayout.setHorizontalGroup(
            errorPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, errorPopupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorMsgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );
        errorPopupLayout.setVerticalGroup(
            errorPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorPopupLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(errorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        locationDialog.setTitle("Add a location");
        locationDialog.setMinimumSize(new java.awt.Dimension(400, 200));
        locationDialog.setModal(true);
        locationDialog.setResizable(false);

        jLabel10.setText("New location:");

        confirmLocationButton.setText("Confirm");
        confirmLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmLocationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout locationDialogLayout = new javax.swing.GroupLayout(locationDialog.getContentPane());
        locationDialog.getContentPane().setLayout(locationDialogLayout);
        locationDialogLayout.setHorizontalGroup(
            locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationDialogLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(confirmLocationButton)
                    .addGroup(locationDialogLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        locationDialogLayout.setVerticalGroup(
            locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationDialogLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(locationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addComponent(confirmLocationButton)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Employee Management System");
        setMinimumSize(new java.awt.Dimension(640, 480));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(800, 600));

        ManagerPanel.setPreferredSize(new java.awt.Dimension(700, 600));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Emp #", "First", "Last", "Location", "Emp. Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "attributes", "information"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setColumnSelectionAllowed(true);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable2PropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        delButton.setBackground(new java.awt.Color(255, 102, 102));
        delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/trash.png"))); // NOI18N
        delButton.setText("remove");
        delButton.setActionCommand("delButton");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(102, 255, 102));
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/add.png"))); // NOI18N
        addButton.setText("add");
        addButton.setActionCommand("addButton");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        addLocationsButton.setBackground(new java.awt.Color(102, 102, 255));
        addLocationsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/marker.png"))); // NOI18N
        addLocationsButton.setText("<html>Add<br />locations</html>");
        addLocationsButton.setActionCommand("addButton");
        addLocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationsButtonActionPerformed(evt);
            }
        });

        dropDownEditSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        dropDownEditSex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownEditSexActionPerformed(evt);
            }
        });

        dropDownEditLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownEditLocationActionPerformed(evt);
            }
        });

        changeTypeButton.setText("Change Employee Type");
        changeTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeTypeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEditLayout = new javax.swing.GroupLayout(jPanelEdit);
        jPanelEdit.setLayout(jPanelEditLayout);
        jPanelEditLayout.setHorizontalGroup(
            jPanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dropDownEditLocation, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dropDownEditSex, javax.swing.GroupLayout.Alignment.TRAILING, 0, 195, Short.MAX_VALUE)
                    .addComponent(changeTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelEditLayout.setVerticalGroup(
            jPanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEditLayout.createSequentialGroup()
                .addComponent(changeTypeButton)
                .addGap(22, 22, 22)
                .addComponent(dropDownEditSex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dropDownEditLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("View and Edit Information:");

        searchEmployeeButton.setText("search emp #");
        searchEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmployeeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManagerPanelLayout = new javax.swing.GroupLayout(ManagerPanel);
        ManagerPanel.setLayout(ManagerPanelLayout);
        ManagerPanelLayout.setHorizontalGroup(
            ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagerPanelLayout.createSequentialGroup()
                .addGroup(ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ManagerPanelLayout.createSequentialGroup()
                        .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addLocationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                        .addComponent(jPanelEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ManagerPanelLayout.createSequentialGroup()
                        .addComponent(searchEmployeeField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchEmployeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        ManagerPanelLayout.setVerticalGroup(
            ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagerPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton)
                        .addComponent(delButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(addLocationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
            .addGroup(ManagerPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(ManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchEmployeeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchEmployeeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("<html>Manage<br />& Add</html>", new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/employee.png")), ManagerPanel, "cats"); // NOI18N

        filePanel.setPreferredSize(new java.awt.Dimension(700, 600));

        newButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/newfolder.png"))); // NOI18N
        newButton.setText("new");
        newButton.setMaximumSize(new java.awt.Dimension(187, 92));
        newButton.setMinimumSize(new java.awt.Dimension(187, 92));
        newButton.setName(""); // NOI18N
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        openButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/open.png"))); // NOI18N
        openButton.setText("open");
        openButton.setMaximumSize(new java.awt.Dimension(187, 92));
        openButton.setMinimumSize(new java.awt.Dimension(187, 92));
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/save.png"))); // NOI18N
        saveButton.setText("save");
        saveButton.setMaximumSize(new java.awt.Dimension(187, 92));
        saveButton.setMinimumSize(new java.awt.Dimension(187, 92));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        saveAsButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        saveAsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/saveAs.png"))); // NOI18N
        saveAsButton.setText("save as");
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filePanelLayout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveAsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(openButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(138, 138, 138))
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAsButton)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(147, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("File", new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/file.png")), filePanel); // NOI18N

        settingsPanel.setPreferredSize(new java.awt.Dimension(700, 600));

        jComboBox1.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Windows", "Windows Classic", "Nimbus", "Metal", "Dark Metal", "Dark Nimbus" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel1.setText("Look and Feel (requires restart):");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(431, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Settings", new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/settings.png")), settingsPanel); // NOI18N

        helpPanel.setPreferredSize(new java.awt.Dimension(700, 600));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/clippy.jpg"))); // NOI18N
        jButton5.setToolTipText("Clippy will solve all your problems!");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setText("Made by Longman Xu and Tommy Huang");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Click Clippy below to open the user guide (online):");

        jLabel9.setText("V. 1.0.0");

        javax.swing.GroupLayout helpPanelLayout = new javax.swing.GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(helpPanelLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel11))
                    .addGroup(helpPanelLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jButton5)))
                .addContainerGap(107, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, helpPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel6))
                .addGap(25, 25, 25))
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18))
        );

        jTabbedPane1.addTab("<html>Help &<br />About</html>", new javax.swing.ImageIcon(getClass().getResource("/iconsPackage/help.png")), helpPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Event code for changing the theme setting.
	 * @param evt 
	 */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
		// change the default theme on next startup
		settings.setLookAndFeel((String) jComboBox1.getSelectedItem());
		try{
			settings.save();
		} catch (IOException e){
			getAngryAtUser("Error while saving settings.");
			e.printStackTrace(System.err);
		}
    }//GEN-LAST:event_jComboBox1ActionPerformed
	
	/**
	 * Event code for when user wants to close the application.
	 * @param evt 
	 */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		boolean saved = false;
		try {
			saved = saveWarning();
		} catch (IOException e) {
			getAngryAtUser(e.toString());
		}
		// close the application (default close operation is do nothing)
		if (saved) {
			this.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
		}
    }//GEN-LAST:event_formWindowClosing
	
	/**
	 * Event code for adding the new employee.
	 * @param evt 
	 */
    private void addTheEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTheEmployeeActionPerformed
        // check to make sure none of the common text fields are empty
		for (JTextField field : addEmployeeCommonTextFields) {
			if (field.getText().isEmpty()) {
				getAngryAtUser("Some of the fields are empty.");
				return;
			}
		}
		try {
			EmployeeInfo newEmployee = null;
			// full time employee:
			if (dropDownType.getSelectedItem().equals("Full time")) {
				// verify that the FT fields are not empty
				if (fieldSalary.getText().isEmpty()) {
					getAngryAtUser("Please enter a salary");
					return;
				}
				// instantiate the new FT employee
				newEmployee = new FullTimeEmployee(Integer.parseInt(fieldNumber.getText()), fieldFName.getText(), fieldLName.getText(),
						dropDownSexes.getSelectedIndex(), dropDownLocation.getSelectedIndex(), Double.parseDouble(fieldDedRate.getText()), Double.parseDouble(fieldSalary.getText()));
			}
			// part time employee:
			else if (dropDownType.getSelectedItem().equals("Part time")) {
				// verify that the PT fields are not empty
				for (JTextField field : addEmployeePTTextFields) {
					if (field.getText().isEmpty()) {
						getAngryAtUser("Some of the fields are empty.");
						return;
					}
				}
				// instantiate the new PT employee
				newEmployee = new PartTimeEmployee(Integer.parseInt(fieldNumber.getText()), fieldFName.getText(), fieldLName.getText(),
					dropDownSexes.getSelectedIndex(), dropDownLocation.getSelectedIndex(), Double.parseDouble(fieldDedRate.getText()), Double.parseDouble(fieldHourWage.getText()), Double.parseDouble(fieldHourWeek.getText()), Double.parseDouble(fieldWeekYear.getText()));
			}
			
			// actually add the new employee:
			if (newEmployee != null) {
				// remove the old employee if the changeType flag is set to true
				if (changeType) {
					if (newEmployee.getEmployeeNumber() != selectedEmployeeNumber && employeeTable.find(newEmployee.getEmployeeNumber()) != null) {
						getAngryAtUser("Duplicate employee number not allowed");
					}
					else {
						changeType = false;
						delButtonActionPerformed(null);
					}
				}
				// add the employee
				employeeTable.add(newEmployee);
				addToEmployeeJTable(newEmployee);
				// set the UI
				addPopup.setVisible(false);
				clearFields();
				jPanelEdit.setVisible(false);
				// set the saveable flag to true
				saveable = true;
			}
		} catch (NumberFormatException e) {
			getAngryAtUser("One or more fields contain incorrect information.");
		} catch (IllegalArgumentException e) {
			getAngryAtUser(e.getMessage());
		}
    }//GEN-LAST:event_addTheEmployeeActionPerformed
	
	/**
	 * Event code for changing the appearance of the add employee window depending on employee type.
	 * @param evt 
	 */
    private void dropDownTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownTypeActionPerformed
        if (dropDownType.getSelectedItem().equals("Full time")) {
			changeSelection(0);
        }
		else if (dropDownType.getSelectedItem().equals("Part time")) {
			changeSelection(1);
		}
    }//GEN-LAST:event_dropDownTypeActionPerformed
	
	/**
	 * Event code for closing the add window if the back button is pressed.
	 * @param evt 
	 */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (changeType) {
			clearFields();
			changeType = false;
		}
        addPopup.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed
	
	/**
	 * Event code for opening a saved hash table.
	 * @param evt 
	 */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
		// save the current table first
		boolean OKToProceed = false;
		if (!saveable) {
			OKToProceed = true;
		}
		else {
			try {
				OKToProceed = saveWarning();
			} catch (IOException e) {
				getAngryAtUser(e.toString());
			}
		}
		
		// discard current table and open new one if safe to proceed
		if (OKToProceed) {
			// show the chooser
			JFileChooser chooser = new JFileChooser("../EMSystem Project/saved_employees");
			FileNameExtensionFilter filter = new FileNameExtensionFilter("EMSystem files", "em");
			chooser.setFileFilter(filter);
			int returnVal = chooser.showOpenDialog(this);
			
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				try {
					// reset the entire thing
					employeeTable = EmployeeHashTable.open(chooser.getSelectedFile());
					DefaultTableModel attributeTableModel = (DefaultTableModel) jTable2.getModel();
					attributeTableModel.setColumnCount(0);
					jPanelEdit.setVisible(false);
					initEmployeeJTable();
					resetLocList();
					jTabbedPane1.setSelectedIndex(0);
					saveable = true;
				} catch (IOException | ClassNotFoundException ex) {
					getAngryAtUser("Error encountered while opening");
				}
			}
		}
    }//GEN-LAST:event_openButtonActionPerformed
	
	/**
	 * Event code for saving the hash table to a new location.
	 * @param evt 
	 */
    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
		if (employeeTable.getNum() == 0) {
			getAngryAtUser("Table is empty!!");
			return;
		}
		
		// show the chooser
		JFileChooser chooser = new JFileChooser("../EMSystem Project/saved_employees");
		FileNameExtensionFilter filter = new FileNameExtensionFilter("EMSystem files", "em");
		chooser.setFileFilter(filter);
		int returnVal = chooser.showSaveDialog(this);
		
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			// save the new file at the location
			try {
				File f = chooser.getSelectedFile();
				String filePath = f.getAbsolutePath();
				if(!filePath.endsWith(".em")) {	// make sure the file has .em
					f = new File(filePath + ".em");
				}
				employeeTable.save(f);
				jTabbedPane1.setSelectedIndex(0);
			} catch (IOException ex) {
				getAngryAtUser(ex.getMessage());
			}		
		}
    }//GEN-LAST:event_saveAsButtonActionPerformed
	
	/**
	 * Event code for saving the hash table to the previous location.
	 * @param evt 
	 */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		if (employeeTable.getNum() == 0) {
			getAngryAtUser("Table is empty!!");
		} else {
			try {
				saveTable();
			} catch (IOException e) {
				getAngryAtUser("Error while saving");
			}
		}
    }//GEN-LAST:event_saveButtonActionPerformed
	
	/**
	 * Event code for displaying the user guide when the Clippy help button is pressed.
	 * @param evt 
	 */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (Desktop.isDesktopSupported()) {
			try {
				Desktop.getDesktop().browse(new URI("https://docs.google.com/document/d/1j-EYGJYj2r_L7vqgbuF4M-QEH421lp-X64hznpZ35vk/edit?usp=sharing"));
			} catch (URISyntaxException | IOException ex) {
				ex.printStackTrace(System.err);
			}
		}
    }//GEN-LAST:event_jButton5ActionPerformed
	
	/**
	 * Event code for adding a new location.
	 * @param evt 
	 */
    private void confirmLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmLocationButtonActionPerformed
		locIsOK = false;
		// add the location
		employeeTable.addLocation(locationTextField.getText());
		dropDownLocation.addItem(locationTextField.getText());
		dropDownEditLocation.addItem(locationTextField.getText());
		// hide the dialog and clear text
		locationTextField.setText("");
		locationDialog.setVisible(false);
		locIsOK = true;
    }//GEN-LAST:event_confirmLocationButtonActionPerformed
	
	/**
	 * Event code for creating a new hash table.
	 * @param evt 
	 */
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
		// save the employee table, if saveable
		boolean okToProceed = false;
		try {
			okToProceed = saveWarning();
		} catch (IOException e) {
			getAngryAtUser(e.toString());
		}
		if (okToProceed) {
			// reset selected employee number
			selectedEmployeeNumber = -1;
			// reset the two jTables
			employeeTable = new EmployeeHashTable(10);
			saveable = false;
			jPanelEdit.setVisible(false);
			DefaultTableModel attributeTableModel = (DefaultTableModel) jTable2.getModel();
			attributeTableModel.setColumnCount(0);
			initEmployeeJTable();
			resetLocList();
			jTabbedPane1.setSelectedIndex(0);
		}
    }//GEN-LAST:event_newButtonActionPerformed
	
	/**
	 * Event code for displaying the add locations window.
	 * @param evt 
	 */
    private void addLocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationsButtonActionPerformed
        locationDialog.setVisible(true);
    }//GEN-LAST:event_addLocationsButtonActionPerformed
	
	/**
	 * Event code for displaying the add employee window.
	 * @param evt 
	 */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int numItems = dropDownLocation.getItemCount();
        if (numItems == 0) {
            getAngryAtUser("No locations have been added yet!");
            return;
        }

        if (dropDownType.getSelectedItem().equals("Full time")) {
            changeSelection(0);
        }
        else if (dropDownType.getSelectedItem().equals("Part time")) {
            changeSelection(1);
        }

        addPopup.setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed
	
	/**
	 * Event code for deleting an employee.
	 * @param evt 
	 */
    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        if (selectedEmployeeNumber == -1) {
			getAngryAtUser("Please try to select an employee.");
		}
        else {
			// delete the employee from the display jTable
			DefaultTableModel employeeTableModel = (DefaultTableModel) jTable1.getModel();
			EmployeeArrayList employeeList = employeeTable.returnAllEmployees();
			int row = employeeList.indexOf(employeeTable.find(selectedEmployeeNumber));
            employeeTableModel.removeRow(row);
			jTable1.setModel(employeeTableModel);
			// delete the employee from the hash table
			employeeTable.remove(selectedEmployeeNumber);
			// reset the selected employee
			selectedEmployeeNumber = -1;
			jTable1.clearSelection();
			// reset the tables
            ((DefaultTableModel) jTable2.getModel()).setColumnCount(0);
			jPanelEdit.setVisible(false);
        }
    }//GEN-LAST:event_delButtonActionPerformed
	
	/**
	 * Event code for modifying an attribute of the employee in the employee attribute table.
	 * @param evt 
	 */
    private void jTable2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable2PropertyChange
		// the correct property change occurs when evt.getNewValue() is null (idk why)
		if (evt.getNewValue() == null) {
			try {
				// get the property table model
				DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();
				// get the selected row and new value
				int parameterRow = jTable2.getSelectedRow();
				String newValue = (String) tableModel.getValueAt(parameterRow, 1);
				// get the modified EmployeeInfo
				EmployeeInfo targetEmployee = employeeTable.find(selectedEmployeeNumber);
				
				// modify the parameter of the target employee
				boolean validChange = false;
				switch (parameterRow) {
					case 1:
					targetEmployee.setFirstName((String) newValue);
					validChange = true;
					break;
					case 2:
					targetEmployee.setLastName((String) newValue);
					validChange = true;
					break;
					case 3:
					targetEmployee.setSex(Integer.parseInt(newValue));
					validChange = true;
					break;
					case 6:
					targetEmployee.setDeductionsRate(Double.parseDouble(newValue));
					validChange = true;
					break;
					case 7:
					if (targetEmployee instanceof FullTimeEmployee) {
						((FullTimeEmployee) targetEmployee).setYearlySalary(Double.parseDouble(newValue));
						validChange = true;
						break;
					}
					else if (targetEmployee instanceof PartTimeEmployee) {
						((PartTimeEmployee) targetEmployee).setHourlyWage(Double.parseDouble(newValue));
						validChange = true;
						break;
					}
					case 8:
					if (targetEmployee instanceof PartTimeEmployee) {
						((PartTimeEmployee) targetEmployee).setHoursPerWeek(Double.parseDouble(newValue));
						validChange = true;
						break;
					}
					case 9:
					if (targetEmployee instanceof PartTimeEmployee) {
						((PartTimeEmployee) targetEmployee).setWeeksPerYear(Double.parseDouble(newValue));
						validChange = true;
						break;
					}
					default:
					getAngryAtUser("Cannot modify this parameter!");
					break;
				}
				if (validChange) {
					updateEmployeeJtable(selectedEmployeeNumber);
				}
			} catch (NumberFormatException | ClassCastException e) {
				getAngryAtUser("Invalid change.");
			}
			// reset the parameters table
			setEditPanels(selectedEmployeeNumber);
        }
    }//GEN-LAST:event_jTable2PropertyChange
	
	/**
	 * Event code for displaying the attributes of a selected employee from the employee display table
	 * @param evt 
	 */
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getRowSelectionAllowed() && jTable1.getSelectedRow() != -1) {
            int selRow = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
            DefaultTableModel employeeTableModel = (DefaultTableModel) jTable1.getModel();
			selectedEmployeeNumber = (int) employeeTableModel.getValueAt(selRow, 0);
            setEditPanels(selectedEmployeeNumber);
        }
    }//GEN-LAST:event_jTable1MouseClicked
	
	/**
	 * Event code for modifying an employee's sex.
	 * @param evt 
	 */
    private void dropDownEditSexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownEditSexActionPerformed
        if (sexIsOK) {
			EmployeeInfo selectedEmployee = employeeTable.find(selectedEmployeeNumber);
			selectedEmployee.setSex(dropDownEditSex.getSelectedIndex());
			updateEmployeeJtable(selectedEmployeeNumber);
			setEditPanels(selectedEmployeeNumber);
		}
    }//GEN-LAST:event_dropDownEditSexActionPerformed
	
	/**
	 * Event code for searching for an employee, and displaying the found employee's attributes
	 * @param evt 
	 */
    private void searchEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmployeeButtonActionPerformed
		EmployeeInfo tempEmployee;
		try {
			selectedEmployeeNumber = Integer.parseInt(searchEmployeeField.getText());
			tempEmployee = employeeTable.find(selectedEmployeeNumber);
			if (tempEmployee == null) {
				getAngryAtUser("An employee with that employee number was not found!");
			}
			else {
				setEditPanels(selectedEmployeeNumber);
				jPanelEdit.setVisible(true);
				jTable1.clearSelection();
			}
			searchEmployeeField.setText("");
		} catch (NumberFormatException e) {
			getAngryAtUser("You did not type in a valid number!");
			searchEmployeeField.setText("");
		}
    }//GEN-LAST:event_searchEmployeeButtonActionPerformed
	
	/**
	 * Event code for modifying an employee's location.
	 * @param evt 
	 */
    private void dropDownEditLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownEditLocationActionPerformed
        // only modify employee location if the locIsOK flag is true
        if (locIsOK) {
            EmployeeInfo selectedEmployee = employeeTable.find(selectedEmployeeNumber);
            selectedEmployee.setWorkLocation(dropDownEditLocation.getSelectedIndex());
            updateEmployeeJtable(selectedEmployeeNumber);
            setEditPanels(selectedEmployeeNumber);
        }
    }//GEN-LAST:event_dropDownEditLocationActionPerformed
	
	/**
	 * Event code for changing the employee from one type to another.
	 * @param evt 
	 */
    private void changeTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeTypeButtonActionPerformed
		// get the selected employee
		EmployeeInfo selectedEmployee = employeeTable.find(selectedEmployeeNumber);
		// set up the add employee window with employee's info filled in
		clearFields();
		fieldNumber.setText(Integer.toString(selectedEmployeeNumber));
		fieldFName.setText(selectedEmployee.getFirstName());
		fieldLName.setText(selectedEmployee.getLastName());
		fieldDedRate.setText(Double.toString(selectedEmployee.getDeductionsRate()));
		dropDownLocation.setSelectedIndex(selectedEmployee.getWorkLocation());
		dropDownSexes.setSelectedIndex(selectedEmployee.getSex());
		dropDownLocation.setSelectedIndex(0);
		if (selectedEmployee instanceof FullTimeEmployee){
			dropDownType.setSelectedIndex(1);
		}
		else if (selectedEmployee instanceof PartTimeEmployee) {
			dropDownType.setSelectedIndex(0);
		}
		
		// set the changeType flag to true for addButtonActionPerformed(), to delete the old employee
		changeType = true;	
		addButtonActionPerformed(null);	// call the method for adding employee
    }//GEN-LAST:event_changeTypeButtonActionPerformed
	
	// <editor-fold defaultstate="collapsed" desc="Auto-generated Variables Declarations">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ManagerPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addLocationsButton;
    private javax.swing.JDialog addPopup;
    private javax.swing.JButton addTheEmployee;
    private javax.swing.JButton backButton;
    private javax.swing.JButton changeTypeButton;
    private javax.swing.JButton confirmLocationButton;
    private javax.swing.JButton delButton;
    private javax.swing.JComboBox<String> dropDownEditLocation;
    private javax.swing.JComboBox<String> dropDownEditSex;
    private javax.swing.JComboBox<String> dropDownLocation;
    private javax.swing.JComboBox<String> dropDownSexes;
    private javax.swing.JComboBox<String> dropDownType;
    private javax.swing.JLabel errorMsgLabel;
    private javax.swing.JDialog errorPopup;
    private javax.swing.JTextField fieldDedRate;
    private javax.swing.JTextField fieldFName;
    private javax.swing.JTextField fieldHourWage;
    private javax.swing.JTextField fieldHourWeek;
    private javax.swing.JTextField fieldLName;
    private javax.swing.JTextField fieldNumber;
    private javax.swing.JTextField fieldSalary;
    private javax.swing.JTextField fieldWeekYear;
    private javax.swing.JPanel filePanel;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelEdit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel labelFull0;
    private javax.swing.JLabel labelPart0;
    private javax.swing.JLabel labelPart1;
    private javax.swing.JLabel labelPart2;
    private javax.swing.JLabel labelRate;
    private javax.swing.JDialog locationDialog;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchEmployeeButton;
    private javax.swing.JTextField searchEmployeeField;
    private javax.swing.JPanel settingsPanel;
    // End of variables declaration//GEN-END:variables
	// </editor-fold>
}